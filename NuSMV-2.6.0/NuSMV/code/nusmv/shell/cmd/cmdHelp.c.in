/* ---------------------------------------------------------------------------

  This file is part of the ``cmd'' package of NuSMV version 2.
  Copyright (C) 2015 by FBK-irst.

  NuSMV version 2 is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  NuSMV version 2 is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.

  For more information on NuSMV see <http://nusmv.fbk.eu>
  or email to <nusmv-users@fbk.eu>.
  Please report bugs to <nusmv-users@fbk.eu>.

  To contact the NuSMV development board, email to <nusmv@fbk.eu>.

-----------------------------------------------------------------------------*/

/*!
  \author Samuele Gallerani
  \brief The module contains an array with the couple command_name and
  command_description

  This source file contains an empty array, with cmake it is populated
  with the actual shell commands and relative description.
*/


//#include "Int.h"

#include <stdio.h>
#include <stdlib.h>

#include "nusmv/shell/cmd/cmdCmdInt.h"
#include "nusmv/shell/cmd/cmdCmd.h"
#include "nusmv/core/utils/assoc.h"


/*---------------------------------------------------------------------------*/
/* Structure declarations                                                    */
/*---------------------------------------------------------------------------*/

/* this is computed by scripts/create_help.py -c */
command_item command_help[] = {
@command_list@
};

/* this is computed by scripts/create_help.py -n */
int command_number=@command_number@;


/*---------------------------------------------------------------------------*/
/* Definition of exported functions                                          */
/*---------------------------------------------------------------------------*/

/* functions helpful to manipulate the dynamic map */
void cmd_help_init(NuSMVEnv_ptr env)
{
  int i;
  hash_ptr help;
  if (!NuSMVEnv_has_value(env, ENV_CMD_HELP)) {
      NuSMVEnv_set_value(env, ENV_CMD_HELP, new_assoc_string_key());
  }

  help = NuSMVEnv_get_value(env, ENV_CMD_HELP);

  for (i=0; i<command_number; i++) {
    insert_assoc(help,
                 NODE_PTR(command_help[i].command_name),
                 NODE_PTR(command_help[i].command_description));
  }
}


void cmd_help_quit(NuSMVEnv_ptr env)
{
  hash_ptr help = (hash_ptr)NuSMVEnv_remove_value(env, ENV_CMD_HELP);
  free_assoc(help);
}


char* cmd_help_get(NuSMVEnv_ptr env, char* command_name)
{
  hash_ptr help = NuSMVEnv_get_value(env, ENV_CMD_HELP);
  char* command_description = (char*)find_assoc(help,NODE_PTR(command_name));
  return command_description;
}


void cmd_help_add(NuSMVEnv_ptr env,
                  const char* command_name,
                  const char* command_description)
{
  hash_ptr help = NuSMVEnv_get_value(env, ENV_CMD_HELP);
  insert_assoc(help, NODE_PTR(command_name), NODE_PTR(command_description));
}


void cmd_help_remove(NuSMVEnv_ptr env, char* command_name)
{
  hash_ptr help = NuSMVEnv_get_value(env, ENV_CMD_HELP);
  node_ptr command_removed = remove_assoc(help, NODE_PTR(command_name));
}
