diff -Naur MiniSat_v1.14_ORIG/depend.mak MiniSat_v1.14/depend.mak
--- MiniSat_v1.14_ORIG/depend.mak	1970-01-01 01:00:00.000000000 +0100
+++ MiniSat_v1.14/depend.mak	2007-08-30 16:07:23.000000000 +0200
@@ -0,0 +1,16 @@
+Solver.o: Solver.C Solver.h SolverTypes.h Global.h VarOrder.h Heap.h \
+  Sort.h
+Solver_C.o: Solver_C.C SolverTypes.h Global.h Solver.h VarOrder.h Heap.h \
+  Solver_C.h
+Solver.op: Solver.C Solver.h SolverTypes.h Global.h VarOrder.h Heap.h \
+  Sort.h
+Solver_C.op: Solver_C.C SolverTypes.h Global.h Solver.h VarOrder.h Heap.h \
+  Solver_C.h
+Solver.od: Solver.C Solver.h SolverTypes.h Global.h VarOrder.h Heap.h \
+  Sort.h
+Solver_C.od: Solver_C.C SolverTypes.h Global.h Solver.h VarOrder.h Heap.h \
+  Solver_C.h
+Solver.or: Solver.C Solver.h SolverTypes.h Global.h VarOrder.h Heap.h \
+  Sort.h
+Solver_C.or: Solver_C.C SolverTypes.h Global.h Solver.h VarOrder.h Heap.h \
+  Solver_C.h
diff -Naur MiniSat_v1.14_ORIG/Global.h MiniSat_v1.14/Global.h
--- MiniSat_v1.14_ORIG/Global.h	2005-07-04 00:45:51.000000000 +0200
+++ MiniSat_v1.14/Global.h	2007-08-30 15:09:48.000000000 +0200
@@ -33,7 +33,7 @@
 // Basic Types & Minor Things:
 
 
-#ifdef _MSC_VER
+#if defined(_MSC_VER)
 typedef INT64              int64;
 typedef UINT64             uint64;
 typedef INT_PTR            intp;
@@ -46,6 +46,9 @@
 typedef unsigned __PTRDIFF_TYPE__ uintp;
 #define I64_fmt "lld"
 #endif
+#if defined(__MINGW32__)
+typedef unsigned int uint;
+#endif
 typedef unsigned char uchar;
 typedef const char    cchar;
 
@@ -97,7 +100,7 @@
 
 
 //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-#ifdef _MSC_VER
+#if defined(_MSC_VER) || defined(__MINGW32__) 
 
 #include <ctime>
 
@@ -109,7 +112,6 @@
 
 //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 #else
-
 #include <sys/time.h>
 #include <sys/resource.h>
 #include <unistd.h>
@@ -134,7 +136,6 @@
 }
 
 static inline int64 memUsed() { return (int64)memReadStat(0) * (int64)getpagesize(); }
-
 //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 #endif
 
diff -Naur MiniSat_v1.14_ORIG/Makefile MiniSat_v1.14/Makefile
--- MiniSat_v1.14_ORIG/Makefile	2005-07-05 09:31:00.000000000 +0200
+++ MiniSat_v1.14/Makefile	2007-08-30 15:09:48.000000000 +0200
@@ -9,6 +9,9 @@
 CHDRS     = $(wildcard *.h)
 COBJS     = $(addsuffix .o, $(basename $(CSRCS)))
 
+LSRCS     = $(filter-out Main.C, $(wildcard *.C))
+LOBJS     = $(addsuffix .o, $(basename $(LSRCS)))
+
 PCOBJS    = $(addsuffix p,  $(COBJS))
 DCOBJS    = $(addsuffix d,  $(COBJS))
 RCOBJS    = $(addsuffix r,  $(COBJS))
@@ -19,10 +22,14 @@
 CFLAGS    = -Wall -ffloat-store
 COPTIMIZE = -O3
 
+LIB = libMiniSat.a
+RANLIB = ranlib
+AR = ar
 
-.PHONY : s p d r build clean depend
+.PHONY : ls s p d r build clean depend
 
 s:	WAY=standard
+ls:	WAY=standard
 p:	WAY=profile
 d:	WAY=debug
 r:	WAY=release
@@ -40,12 +47,18 @@
 r:	build $(EXEC)_release
 rs:	build $(EXEC)_static
 
+s:	CFLAGS+=$(COPTIMIZE) -ggdb -D DEBUG
+ls:	lbuild $(LIB)_s 
+
 build:
 	@echo Building $(EXEC) "("$(WAY)")"
 
+lbuild:
+	@echo Building $(LIB) "("$(WAY)")"
+
 clean:
 	@rm -f $(EXEC) $(EXEC)_profile $(EXEC)_debug $(EXEC)_release $(EXEC)_static \
-	  $(COBJS) $(PCOBJS) $(DCOBJS) $(RCOBJS) depend.mak
+	  $(COBJS) $(PCOBJS) $(DCOBJS) $(RCOBJS) depend.mak $(LIB)
 
 ## Build rule
 %.o %.op %.od %.or:	%.C
@@ -73,12 +86,18 @@
 	@echo Linking $@
 	@$(CXX) --static $(RCOBJS) -lz -Wall -o $@
 
+lib: ls $(LIB)_s
+
+$(LIB)_s:   $(LOBJS)
+	@rm -f $(LIB)
+	$(AR) cr $(LIB) $(LOBJS)
+	$(RANLIB) $(LIB)
 
 ## Make dependencies
 depend:	depend.mak
-depend.mak: $(CSRCS) $(CHDRS)
+depend.mak: $(LSRCS) $(CHDRS)
 	@echo Making dependencies ...
-	@$(CXX) -MM $(CSRCS) > depend.mak
+	@$(CXX) -MM $(LSRCS) > depend.mak
 	@cp depend.mak /tmp/depend.mak.tmp
 	@sed "s/o:/op:/" /tmp/depend.mak.tmp >> depend.mak
 	@sed "s/o:/od:/" /tmp/depend.mak.tmp >> depend.mak
diff -Naur MiniSat_v1.14_ORIG/Solver_C.C MiniSat_v1.14/Solver_C.C
--- MiniSat_v1.14_ORIG/Solver_C.C	1970-01-01 01:00:00.000000000 +0100
+++ MiniSat_v1.14/Solver_C.C	2007-08-30 16:04:11.000000000 +0200
@@ -0,0 +1,144 @@
+#include "SolverTypes.h"
+#include "Solver.h"
+extern "C" {
+#include "Solver_C.h"
+}
+
+extern "C" MiniSat_ptr MiniSat_Create()
+{
+  return (MiniSat_ptr)new Solver();
+}
+
+extern "C"void MiniSat_Delete(MiniSat_ptr ms)
+{
+  delete (Solver *)ms;
+}
+
+extern "C" int MiniSat_Nof_Variables(MiniSat_ptr ms)
+{
+  return ((Solver *)ms)->nVars();
+}
+
+extern "C" int MiniSat_Nof_Clauses(MiniSat_ptr ms)
+{
+  return ((Solver *)ms)->nClauses();
+}
+
+/* variables are in the range 1...N */
+extern "C" int MiniSat_New_Variable(MiniSat_ptr ms)
+{
+  /* Actually, minisat used variable range 0 .. N-1,
+     so in all function below there is a convertion between
+     input variable (1..N) and internal variables (0..N-1)
+  */	
+  return ((Solver *)ms)->newVar() + 1;
+}
+
+
+/*
+ * Here clauses are in dimacs form, variable indexing is 1...N
+ */
+extern "C" int MiniSat_Add_Clause(MiniSat_ptr ms,
+				  int *clause_lits, int num_lits)
+{
+  int i;
+  vec<Lit> cl;
+  for(i = 0; i < num_lits; i++) {
+    const int lit = clause_lits[i];
+    assert(abs(lit) > 0);
+    assert(abs(lit) <= MiniSat_Nof_Variables((Solver*)ms));
+    int var = abs(lit) - 1;
+    cl.push((lit > 0) ? Lit(var) : ~Lit(var));
+  }
+  ((Solver *)ms)->addClause(cl);
+  if(((Solver *)ms)->okay())
+    return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_Solve(MiniSat_ptr ms)
+{
+  bool ret = ((Solver *)ms)->solve();
+  if(ret)
+    return 1;
+  return 0;
+}
+
+
+/*
+ * Here the assumption is in "dimacs form", variable indexing is 1...N
+ */
+extern "C" int MiniSat_Solve_Assume(MiniSat_ptr ms,
+				    int nof_assumed_lits,
+				    int *assumed_lits)
+{
+  int i;
+  vec<Lit> cl;
+  assert(((Solver*)0) != ((Solver*)ms)); 
+  Solver& solver = *((Solver*)ms);
+
+  solver.simplifyDB();
+  if(solver.okay() == false)
+    return 0;
+
+  assert(nof_assumed_lits >= 0);
+  for(i = 0; i < nof_assumed_lits; i++) {
+    const int lit = assumed_lits[i];
+    assert(abs(lit) > 0);
+    assert(abs(lit) <= MiniSat_Nof_Variables((Solver*)ms));
+    int var = abs(lit) - 1;
+    cl.push((lit > 0) ? Lit(var) : ~Lit(var));
+  }
+
+  if (solver.solve(cl))
+    return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_simplifyDB(MiniSat_ptr ms)
+{
+  ((Solver *)ms)->simplifyDB();
+  if(((Solver *)ms)->okay())
+    return 1;
+  return 0;
+}
+
+/*
+ * Here variables are numbered 1...N
+ */
+extern "C" int MiniSat_Get_Value(MiniSat_ptr ms, int var_num)
+{
+  assert(var_num > 0);
+  if(var_num > MiniSat_Nof_Variables(ms))
+    return -1;
+  /* minisat assigns all variables. just check */
+  assert(((Solver *)ms)->model[var_num-1] != l_Undef); 
+  
+  if(((Solver *)ms)->model[var_num-1] == l_True)
+    return 1;
+  return 0;
+}
+
+/** These have faking behaviour to emulate version 2 */
+extern "C" void MiniSat_Set_Polarity_Mode(MiniSat_ptr ms, int mode)
+{}
+
+extern "C" int MiniSat_Get_Polarity_Mode(MiniSat_ptr ms)
+{ return 0; }
+
+extern "C" void MiniSat_Set_Random_Seed(MiniSat_ptr ms, double seed)
+{}
+
+/** If used, these functions lead to an error, as no
+    implementation is provided */
+extern "C" int MiniSat_Get_Nof_Conflict_Lits(MiniSat_ptr ms)
+{ assert(0); return 0; }
+
+extern "C" void MiniSat_Get_Conflict_Lits(MiniSat_ptr ms, int* conflict_lits)
+{ assert(0); }
+
+extern "C" void MiniSat_Set_Preferred_Variable(MiniSat_ptr, int)
+{ assert(0); }
+
+extern "C" void MiniSat_Clear_Preferred_Variables(MiniSat_ptr)
+{ assert(0); }
diff -Naur MiniSat_v1.14_ORIG/Solver_C.h MiniSat_v1.14/Solver_C.h
--- MiniSat_v1.14_ORIG/Solver_C.h	1970-01-01 01:00:00.000000000 +0100
+++ MiniSat_v1.14/Solver_C.h	2007-08-30 16:07:08.000000000 +0200
@@ -0,0 +1,46 @@
+/**************************************************************************************************
+
+Solver_C.h
+
+C-wrapper for Solver.h
+
+**************************************************************************************************/
+
+#ifndef SOLVER_C_h
+#define SOLVER_C_h
+
+//=================================================================================================
+// Solver -- the main class:
+
+#define MiniSat_ptr void *
+
+enum { polarity_true = 0, polarity_false = 1, 
+       polarity_user = 2, polarity_rnd = 3 };
+
+MiniSat_ptr MiniSat_Create();
+void MiniSat_Delete(MiniSat_ptr);
+int MiniSat_Nof_Variables(MiniSat_ptr);
+int MiniSat_Nof_Clauses(MiniSat_ptr);
+int MiniSat_New_Variable(MiniSat_ptr);
+int MiniSat_Add_Clause(MiniSat_ptr, int *clause_lits, int num_lits);
+int MiniSat_Solve(MiniSat_ptr);
+int MiniSat_Solve_Assume(MiniSat_ptr, int nof_assumed_lits, int *assumed_lits);
+int MiniSat_simplifyDB(MiniSat_ptr);
+int MiniSat_Get_Value(MiniSat_ptr, int var_num);
+
+/** If used, these functions lead to an error, as no
+    implementation is provided. Version 2.0 or later is required */
+int MiniSat_Get_Nof_Conflict_Lits(MiniSat_ptr ms);
+void MiniSat_Get_Conflict_Lits(MiniSat_ptr ms, int* conflict_lits);
+void MiniSat_Set_Preferred_Variable(MiniSat_ptr, int);
+void MiniSat_Clear_Preferred_Variables(MiniSat_ptr);
+
+/** These are fake function, no features are provided (empty behaviour) */
+void MiniSat_Set_Polarity_Mode(MiniSat_ptr, int);
+int MiniSat_Get_Polarity_Mode(MiniSat_ptr);
+void MiniSat_Set_Random_Seed(MiniSat_ptr, double);
+
+
+
+//=================================================================================================
+#endif
diff -Naur MiniSat_v1.14_ORIG/Solver.h MiniSat_v1.14/Solver.h
--- MiniSat_v1.14_ORIG/Solver.h	2005-10-05 02:31:28.000000000 +0200
+++ MiniSat_v1.14/Solver.h	2007-08-30 15:09:48.000000000 +0200
@@ -148,7 +148,10 @@
 
    ~Solver() {
        for (int i = 0; i < learnts.size(); i++) remove(learnts[i], true);
-       for (int i = 0; i < clauses.size(); i++) if (clauses[i] != NULL) remove(clauses[i], true); }
+       for (int i = 0; i < clauses.size(); i++) if (clauses[i] != NULL) remove(clauses[i], true);
+       xfree(propagate_tmpbin);
+       xfree(analyze_tmpbin);
+       xfree(solve_tmpunit); }
 
     // Helpers: (semi-internal)
     //
diff -Naur MiniSat_v1.14_ORIG/SolverTypes.h MiniSat_v1.14/SolverTypes.h
--- MiniSat_v1.14_ORIG/SolverTypes.h	2005-07-05 00:23:31.000000000 +0200
+++ MiniSat_v1.14/SolverTypes.h	2007-08-30 15:09:48.000000000 +0200
@@ -34,6 +34,7 @@
 // so that they can be used as array indices.
 
 typedef int Var;
+
 #define var_Undef (-1)
 
 
