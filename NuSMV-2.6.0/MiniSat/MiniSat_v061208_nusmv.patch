diff -Naur minisat_ORIG/core/Solver_C.C minisat/core/Solver_C.C
--- minisat_ORIG/core/Solver_C.C	1970-01-01 01:00:00.000000000 +0100
+++ minisat/core/Solver_C.C	2007-08-11 18:41:40.000000000 +0200
@@ -0,0 +1,176 @@
+/**************************************************************************************************
+
+Solver_C.C
+
+C-wrapper for Solver.C
+
+  This file is part of NuSMV version 2. 
+  Copyright (C) 2007 by FBK-irst. 
+  Author: Roberto Cavada <cavada@fbk.eu>
+
+  NuSMV version 2 is free software; you can redistribute it and/or 
+  modify it under the terms of the GNU Lesser General Public 
+  License as published by the Free Software Foundation; either 
+  version 2 of the License, or (at your option) any later version.
+
+  NuSMV version 2 is distributed in the hope that it will be useful, 
+  but WITHOUT ANY WARRANTY; without even the implied warranty of 
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
+  Lesser General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public 
+  License along with this library; if not, write to the Free Software 
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
+
+  For more information on NuSMV see <http://nusmv.fbk.eu>
+  or email to <nusmv-users@fbk.eu>.
+  Please report bugs to <nusmv-users@fbk.eu>.
+
+  To contact the NuSMV development board, email to <nusmv@fbk.eu>. ]
+
+**************************************************************************************************/
+
+
+#include "Solver.h"
+extern "C" {
+#include "Solver_C.h"
+}
+
+extern "C" MiniSat_ptr MiniSat_Create()
+{
+  return (MiniSat_ptr)new Solver();
+}
+
+extern "C"void MiniSat_Delete(MiniSat_ptr ms)
+{
+  delete (Solver *)ms;
+}
+
+extern "C" int MiniSat_Nof_Variables(MiniSat_ptr ms)
+{
+  return ((Solver *)ms)->nVars();
+}
+
+extern "C" int MiniSat_Nof_Clauses(MiniSat_ptr ms)
+{
+  return ((Solver *)ms)->nClauses();
+}
+
+/* variables are in the range 1...N */
+extern "C" int MiniSat_New_Variable(MiniSat_ptr ms)
+{
+  /* Actually, minisat used variable range 0 .. N-1,
+     so in all function below there is a convertion between
+     input variable (1..N) and internal variables (0..N-1)
+  */	
+  return ((Solver *)ms)->newVar() + 1;
+}
+
+
+/*
+ * Here clauses are in dimacs form, variable indexing is 1...N
+ */
+extern "C" int MiniSat_Add_Clause(MiniSat_ptr ms,
+				  int *clause_lits, int num_lits)
+{
+  int i;
+  vec<Lit> cl;
+  for(i = 0; i < num_lits; i++) {
+    const int lit = clause_lits[i];
+    assert(abs(lit) > 0);
+    assert(abs(lit) <= MiniSat_Nof_Variables((Solver*)ms));
+    int var = abs(lit) - 1;
+    cl.push((lit > 0) ? Lit(var) : ~Lit(var));
+  }
+  ((Solver *)ms)->addClause(cl);
+  if(((Solver *)ms)->okay())
+    return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_Solve(MiniSat_ptr ms)
+{
+  bool ret = ((Solver *)ms)->solve();
+  if(ret)
+    return 1;
+  return 0;
+}
+
+
+/*
+ * Here the assumption is in "dimacs form", variable indexing is 1...N
+ */
+extern "C" int MiniSat_Solve_Assume(MiniSat_ptr ms,
+				    int nof_assumed_lits,
+				    int *assumed_lits)
+{
+  int i;
+  vec<Lit> cl;
+  assert(((Solver*)0) != ((Solver*)ms)); 
+  Solver& solver = *((Solver*)ms);
+
+  solver.simplify();
+  if(solver.okay() == false)
+    return 0;
+
+  assert(nof_assumed_lits >= 0);
+  for(i = 0; i < nof_assumed_lits; i++) {
+    const int lit = assumed_lits[i];
+    assert(abs(lit) > 0);
+    assert(abs(lit) <= MiniSat_Nof_Variables((Solver*)ms));
+    int var = abs(lit) - 1;
+    cl.push((lit > 0) ? Lit(var) : ~Lit(var));
+  }
+
+  if (solver.solve(cl))
+    return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_simplifyDB(MiniSat_ptr ms)
+{
+  ((Solver *)ms)->simplify();
+  if(((Solver *)ms)->okay())
+    return 1;
+  return 0;
+}
+
+/*
+ * Here variables are numbered 1...N
+ */
+extern "C" int MiniSat_Get_Value(MiniSat_ptr ms, int var_num)
+{
+  assert(var_num > 0);
+  if(var_num > MiniSat_Nof_Variables(ms))
+    return -1;
+  /* minisat assigns all variables. just check */
+  assert(((Solver *)ms)->model[var_num-1] != l_Undef); 
+  
+  if(((Solver *)ms)->model[var_num-1] == l_True)
+    return 1;
+  return 0;
+}
+
+
+extern "C" int MiniSat_Get_Nof_Conflict_Lits(MiniSat_ptr ms)
+{
+  assert(((Solver*)0) != ((Solver*)ms)); 
+  Solver& solver = *((Solver*)ms);
+
+  return solver.conflict.size();
+}
+
+extern "C" void MiniSat_Get_Conflict_Lits(MiniSat_ptr ms, int* conflict_lits)
+{
+  assert(((Solver*)0) != ((Solver*)ms)); 
+  Solver& solver = *((Solver*)ms);
+
+  vec<Lit>& cf = solver.conflict;
+
+  for (int i = 0; i < cf.size(); i++) {
+    int v = var(~cf[i]);
+    int s = sign(~cf[i]);
+    assert(v != var_Undef);
+    conflict_lits[i] = (s == 0) ? (v+1) : -(v+1);
+  }
+}
diff -Naur minisat_ORIG/core/Solver_C.h minisat/core/Solver_C.h
--- minisat_ORIG/core/Solver_C.h	1970-01-01 01:00:00.000000000 +0100
+++ minisat/core/Solver_C.h	2007-08-11 18:42:09.000000000 +0200
@@ -0,0 +1,55 @@
+/**************************************************************************************************
+
+Solver_C.h
+
+C-wrapper for Solver.h
+
+  This file is part of NuSMV version 2. 
+  Copyright (C) 2007 by FBK-irst. 
+  Author: Roberto Cavada <cavada@fbk.eu>
+
+  NuSMV version 2 is free software; you can redistribute it and/or 
+  modify it under the terms of the GNU Lesser General Public 
+  License as published by the Free Software Foundation; either 
+  version 2 of the License, or (at your option) any later version.
+
+  NuSMV version 2 is distributed in the hope that it will be useful, 
+  but WITHOUT ANY WARRANTY; without even the implied warranty of 
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
+  Lesser General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public 
+  License along with this library; if not, write to the Free Software 
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
+
+  For more information on NuSMV see <http://nusmv.fbk.eu>
+  or email to <nusmv-users@fbk.eu>.
+  Please report bugs to <nusmv-users@fbk.eu>.
+
+  To contact the NuSMV development board, email to <nusmv@fbk.eu>. ]
+
+**************************************************************************************************/
+
+#ifndef SOLVER_C_h
+#define SOLVER_C_h
+
+//=================================================================================================
+// Solver -- the main class:
+
+#define MiniSat_ptr void *
+
+MiniSat_ptr MiniSat_Create();
+void MiniSat_Delete(MiniSat_ptr);
+int MiniSat_Nof_Variables(MiniSat_ptr);
+int MiniSat_Nof_Clauses(MiniSat_ptr);
+int MiniSat_New_Variable(MiniSat_ptr);
+int MiniSat_Add_Clause(MiniSat_ptr, int *clause_lits, int num_lits);
+int MiniSat_Solve(MiniSat_ptr);
+int MiniSat_Solve_Assume(MiniSat_ptr, int nof_assumed_lits, int *assumed_lits);
+int MiniSat_simplifyDB(MiniSat_ptr);
+int MiniSat_Get_Value(MiniSat_ptr, int var_num);
+int MiniSat_Get_Nof_Conflict_Lits(MiniSat_ptr ms);
+void MiniSat_Get_Conflict_Lits(MiniSat_ptr ms, int* conflict_lits);
+
+//=================================================================================================
+#endif
diff -Naur minisat_ORIG/Makefile minisat/Makefile
--- minisat_ORIG/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ minisat/Makefile	2007-08-11 18:40:06.000000000 +0200
@@ -0,0 +1,34 @@
+# Copyright (c) 2007 by FBK-irst
+# Author: Roberto Cavada <cavada@fbk.eu>
+# This file has been added in order to make Minisat2 
+# compilable with NuSMV
+
+LIBNAME = libminisat.a
+EXT_LIBNAME = libMiniSat.a
+EXT_LIBIFC = Solver_C.h
+COREDIR = simp
+
+LN ?= ln -s
+RANLIB ?= ranlib
+RM ?= rm -f
+MAKE ?= make
+
+# ----------------------------------------------------------------------
+# this target is invoked by the builder
+lib: $(EXT_LIBNAME) $(EXT_LIBIFC)
+	@echo Done
+
+clean: 
+	cd $(COREDIR) && $(MAKE) clean
+	$(RM) $(EXT_LIBNAME) $(EXT_LIBIFC)
+	$(RM) $(COREDIR)/depend.mk
+# ----------------------------------------------------------------------
+
+$(COREDIR)/$(LIBNAME):
+	cd $(COREDIR) && $(MAKE) lib && $(RANLIB) $(LIBNAME)
+
+$(EXT_LIBNAME): $(COREDIR)/$(LIBNAME)
+	$(LN) $(COREDIR)/$(LIBNAME) $(EXT_LIBNAME)
+
+$(EXT_LIBIFC):
+	$(LN) $(COREDIR)/$(EXT_LIBIFC) $(EXT_LIBIFC)
diff -Naur minisat_ORIG/mtl/template.mk minisat/mtl/template.mk
--- minisat_ORIG/mtl/template.mk	2006-10-02 14:15:07.000000000 +0200
+++ minisat/mtl/template.mk	2007-08-11 18:40:06.000000000 +0200
@@ -17,6 +17,7 @@
 LIB       ?= $(EXEC)
 
 CXX       ?= g++
+AR        ?= ar
 CFLAGS    ?= -Wall
 LFLAGS    ?= -Wall
 
@@ -70,7 +71,7 @@
 lib$(LIB).a lib$(LIB)d.a:
 	@echo Library: "$@ ( $^ )"
 	@rm -f $@
-	@ar cq $@ $^
+	$(AR) cq $@ $^
 
 ## Clean rule
 clean:
diff -Naur minisat_ORIG/simp/Makefile minisat/simp/Makefile
--- minisat_ORIG/simp/Makefile	2006-10-02 14:09:42.000000000 +0200
+++ minisat/simp/Makefile	2007-08-11 18:40:06.000000000 +0200
@@ -5,7 +5,8 @@
 CFLAGS    = -I$(MTL) -I$(CORE) -Wall -ffloat-store
 LFLAGS    = -lz
 
-CSRCS     = $(wildcard *.C)
+CMAINS    = Main.C
+CSRCS     = $(filter-out $(CMAINS), $(wildcard *.C))
 COBJS     = $(addsuffix .o, $(basename $(CSRCS))) $(CORE)/Solver.o
 
 include ../mtl/template.mk
diff -Naur minisat_ORIG/simp/Solver_C.C minisat/simp/Solver_C.C
--- minisat_ORIG/simp/Solver_C.C	1970-01-01 01:00:00.000000000 +0100
+++ minisat/simp/Solver_C.C	2007-08-11 18:44:16.000000000 +0200
@@ -0,0 +1,175 @@
+/**************************************************************************************************
+
+Solver_C.C
+
+C-wrapper for Solver.C
+
+  This file is part of NuSMV version 2. 
+  Copyright (C) 2007 by FBK-irst. 
+  Author: Roberto Cavada <cavada@fbk.eu>
+
+  NuSMV version 2 is free software; you can redistribute it and/or 
+  modify it under the terms of the GNU Lesser General Public 
+  License as published by the Free Software Foundation; either 
+  version 2 of the License, or (at your option) any later version.
+
+  NuSMV version 2 is distributed in the hope that it will be useful, 
+  but WITHOUT ANY WARRANTY; without even the implied warranty of 
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
+  Lesser General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public 
+  License along with this library; if not, write to the Free Software 
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
+
+  For more information on NuSMV see <http://nusmv.fbk.eu>
+  or email to <nusmv-users@fbk.eu>.
+  Please report bugs to <nusmv-users@fbk.eu>.
+
+  To contact the NuSMV development board, email to <nusmv@fbk.eu>. ]
+
+**************************************************************************************************/
+
+
+#include "SimpSolver.h"
+extern "C" {
+#include "Solver_C.h"
+}
+
+extern "C" MiniSat_ptr MiniSat_Create()
+{
+  return (MiniSat_ptr)new SimpSolver();
+}
+
+extern "C"void MiniSat_Delete(MiniSat_ptr ms)
+{
+  delete (SimpSolver *)ms;
+}
+
+extern "C" int MiniSat_Nof_Variables(MiniSat_ptr ms)
+{
+  return ((SimpSolver *)ms)->nVars();
+}
+
+extern "C" int MiniSat_Nof_Clauses(MiniSat_ptr ms)
+{
+  return ((SimpSolver *)ms)->nClauses();
+}
+
+/* variables are in the range 1...N */
+extern "C" int MiniSat_New_Variable(MiniSat_ptr ms)
+{
+  /* Actually, minisat used variable range 0 .. N-1,
+     so in all function below there is a convertion between
+     input variable (1..N) and internal variables (0..N-1)
+  */	
+  return ((SimpSolver *)ms)->newVar() + 1;
+}
+
+
+/*
+ * Here clauses are in dimacs form, variable indexing is 1...N
+ */
+extern "C" int MiniSat_Add_Clause(MiniSat_ptr ms,
+				  int *clause_lits, int num_lits)
+{
+  int i;
+  vec<Lit> cl;
+  for(i = 0; i < num_lits; i++) {
+    const int lit = clause_lits[i];
+    assert(abs(lit) > 0);
+    assert(abs(lit) <= MiniSat_Nof_Variables((SimpSolver*)ms));
+    int var = abs(lit) - 1;
+    cl.push((lit > 0) ? Lit(var) : ~Lit(var));
+  }
+  ((SimpSolver *)ms)->addClause(cl);
+  if(((SimpSolver *)ms)->okay())
+    return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_Solve(MiniSat_ptr ms)
+{
+  bool ret = ((SimpSolver *)ms)->solve(true, true);
+  if(ret)
+    return 1;
+  return 0;
+}
+
+
+/*
+ * Here the assumption is in "dimacs form", variable indexing is 1...N
+ */
+extern "C" int MiniSat_Solve_Assume(MiniSat_ptr ms,
+				    int nof_assumed_lits,
+				    int *assumed_lits)
+{
+  int i;
+  vec<Lit> cl;
+  assert(((SimpSolver*)0) != ((SimpSolver*)ms)); 
+  SimpSolver& solver = *((SimpSolver*)ms);
+
+  solver.simplify();
+  if(solver.okay() == false)
+    return 0;
+
+  assert(nof_assumed_lits >= 0);
+  for(i = 0; i < nof_assumed_lits; i++) {
+    const int lit = assumed_lits[i];
+    assert(abs(lit) > 0);
+    assert(abs(lit) <= MiniSat_Nof_Variables((SimpSolver*)ms));
+    int var = abs(lit) - 1;
+    cl.push((lit > 0) ? Lit(var) : ~Lit(var));
+  }
+
+  if (solver.solve(cl, true, true))
+    return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_simplifyDB(MiniSat_ptr ms)
+{
+  ((SimpSolver *)ms)->simplify();
+  if(((SimpSolver *)ms)->okay())
+    return 1;
+  return 0;
+}
+
+/*
+ * Here variables are numbered 1...N
+ */
+extern "C" int MiniSat_Get_Value(MiniSat_ptr ms, int var_num)
+{
+  assert(var_num > 0);
+  if(var_num > MiniSat_Nof_Variables(ms))
+    return -1;
+  /* minisat assigns all variables. just check */
+  assert(((SimpSolver *)ms)->model[var_num-1] != l_Undef); 
+  
+  if(((SimpSolver *)ms)->model[var_num-1] == l_True)
+    return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_Get_Nof_Conflict_Lits(MiniSat_ptr ms)
+{
+  assert(((Solver*)0) != ((Solver*)ms)); 
+  Solver& solver = *((Solver*)ms);
+
+  return solver.conflict.size();
+}
+
+extern "C" void MiniSat_Get_Conflict_Lits(MiniSat_ptr ms, int* conflict_lits)
+{
+  assert(((SimpSolver*)0) != ((SimpSolver*)ms)); 
+  SimpSolver& solver = *((SimpSolver*)ms);
+
+  vec<Lit>& cf = solver.conflict;
+
+  for (int i = 0; i < cf.size(); i++) {
+    int v = var(~cf[i]);
+    int s = sign(~cf[i]);
+    assert(v != var_Undef);
+    conflict_lits[i] = (s == 0) ? (v+1) : -(v+1);
+  }
+}
diff -Naur minisat_ORIG/simp/Solver_C.h minisat/simp/Solver_C.h
--- minisat_ORIG/simp/Solver_C.h	1970-01-01 01:00:00.000000000 +0100
+++ minisat/simp/Solver_C.h	2007-08-11 18:40:06.000000000 +0200
@@ -0,0 +1,54 @@
+/**************************************************************************************************
+
+Solver_C.h
+
+C-wrapper for Solver.h
+
+  This file is part of NuSMV version 2. 
+  Copyright (C) 2007 by FBK-irst. 
+  Author: Roberto Cavada <cavada@fbk.eu>
+
+  NuSMV version 2 is free software; you can redistribute it and/or 
+  modify it under the terms of the GNU Lesser General Public 
+  License as published by the Free Software Foundation; either 
+  version 2 of the License, or (at your option) any later version.
+
+  NuSMV version 2 is distributed in the hope that it will be useful, 
+  but WITHOUT ANY WARRANTY; without even the implied warranty of 
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
+  Lesser General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public 
+  License along with this library; if not, write to the Free Software 
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
+
+  For more information on NuSMV see <http://nusmv.fbk.eu>
+  or email to <nusmv-users@fbk.eu>.
+  Please report bugs to <nusmv-users@fbk.eu>.
+
+  To contact the NuSMV development board, email to <nusmv@fbk.eu>. ]
+
+**************************************************************************************************/
+
+#ifndef SOLVER_C_h
+#define SOLVER_C_h
+
+//=================================================================================================
+// Solver -- the main class:
+
+#define MiniSat_ptr void *
+
+MiniSat_ptr MiniSat_Create();
+void MiniSat_Delete(MiniSat_ptr);
+int MiniSat_Nof_Variables(MiniSat_ptr);
+int MiniSat_Nof_Clauses(MiniSat_ptr);
+int MiniSat_New_Variable(MiniSat_ptr);
+int MiniSat_Add_Clause(MiniSat_ptr, int *clause_lits, int num_lits);
+int MiniSat_Solve(MiniSat_ptr);
+int MiniSat_Solve_Assume(MiniSat_ptr, int nof_assumed_lits, int *assumed_lits);
+int MiniSat_simplifyDB(MiniSat_ptr);
+int MiniSat_Get_Value(MiniSat_ptr, int var_num);
+
+
+//=================================================================================================
+#endif
