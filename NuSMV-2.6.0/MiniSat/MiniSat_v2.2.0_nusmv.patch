diff -Naur minisat-2.2.0_or/core/Solver.cc minisat-2.2.0/core/Solver.cc
--- minisat-2.2.0_or/core/Solver.cc	2010-07-10 18:07:36.000000000 +0200
+++ minisat-2.2.0/core/Solver.cc	2013-09-10 10:17:37.351726062 +0200
@@ -90,13 +90,22 @@
   , order_heap         (VarOrderLt(activity))
   , progress_estimate  (0)
   , remove_satisfied   (true)
+  , next_var           (0)
 
     // Resource constraints:
     //
   , conflict_budget    (-1)
   , propagation_budget (-1)
   , asynch_interrupt   (false)
-{}
+{
+  // NuSMV: MOD BEGIN
+  /* Disables "progress saving" which relies on last polarity
+     assigned to a var when branching. Polarity for us is forced to
+     be false. See http://reasoning.cs.ucla.edu/fetch.php?id=69&type=pdf
+  */
+  phase_saving = 0;
+  // NuSMV: MOD END
+}
 
 
 Solver::~Solver()
@@ -113,22 +122,52 @@
 //
 Var Solver::newVar(bool sign, bool dvar)
 {
-    int v = nVars();
+    Var v;
+    if (free_vars.size() > 0){
+        v = free_vars.last();
+        free_vars.pop();
+    }else
+        v = next_var++;
+    
     watches  .init(mkLit(v, false));
     watches  .init(mkLit(v, true ));
-    assigns  .push(l_Undef);
-    vardata  .push(mkVarData(CRef_Undef, 0));
+
+#define M_SETVAR(arr, v, val) do {              \
+        if (arr.size() > v) {                   \
+            arr[v] = val;                       \
+        } else {                                \
+            assert(arr.size() == v);            \
+            arr.push(val);                      \
+        }                                       \
+    } while(0)
+        
+    M_SETVAR(assigns, v, l_Undef);
+    M_SETVAR(vardata, v, mkVarData(CRef_Undef, 0));
     //activity .push(0);
-    activity .push(rnd_init_act ? drand(random_seed) * 0.00001 : 0);
-    seen     .push(0);
-    polarity .push(sign);
-    decision .push();
+    M_SETVAR(activity, v, rnd_init_act ? drand(random_seed) * 0.00001 : 0);
+    M_SETVAR(seen, v, 0);
+    M_SETVAR(polarity, v, sign);
+    M_SETVAR(decision, v, 0);
+
+#undef M_SETVAR
+    
     trail    .capacity(v+1);
     setDecisionVar(v, dvar);
     return v;
 }
 
 
+// Note: at the moment, only unassigned variable will be released (this is to avoid duplicate
+// releases of the same variable).
+void Solver::releaseVar(Lit l)
+{
+    if (value(l) == l_Undef){
+        addClause(l);
+        released_vars.push(var(l));
+    }
+}
+
+
 bool Solver::addClause_(vec<Lit>& ps)
 {
     assert(decisionLevel() == 0);
@@ -226,11 +265,24 @@
 {
     Var next = var_Undef;
 
+    // NuSMV: PREF MOD
+    // Selection from preferred list
+    for (int i = 0; i < preferred.size(); i++) {
+      if (value(preferred[i]) == l_Undef) {
+        next = preferred[i];
+      }
+    }
+    // NuSMV: PREF MOD END
+
     // Random decision:
-    if (drand(random_seed) < random_var_freq && !order_heap.empty()){
+    // NuSMV: PREF MOD
+    if (next == var_Undef && drand(random_seed) < random_var_freq && 
+        !order_heap.empty()){
+    // NuSMV: PREF MOD END
         next = order_heap[irand(random_seed,order_heap.size())];
         if (value(next) == l_Undef && decision[next])
-            rnd_decisions++; }
+            rnd_decisions++; 
+    }
 
     // Activity based decision:
     while (next == var_Undef || value(next) != l_Undef || !decision[next])
@@ -555,6 +607,17 @@
     cs.shrink(i - j);
 }
 
+// NuSMV: PREF MOD
+void Solver::addPreferred(Var v)
+{
+  preferred.push(v);
+}
+
+void Solver::clearPreferred()
+{
+  preferred.clear(0);
+}
+// NuSMV: PREF MOD END
 
 void Solver::rebuildOrderHeap()
 {
@@ -586,8 +649,32 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    if (remove_satisfied)        // Can be turned off.
+    if (remove_satisfied){        // Can be turned off.
         removeSatisfied(clauses);
+
+        // TODO: what todo in if 'remove_satisfied' is false?
+
+        // Remove all released variables from the trail:
+        for (int i = 0; i < released_vars.size(); i++){
+            assert(seen[released_vars[i]] == 0);
+            seen[released_vars[i]] = 1;
+        }
+
+        int i, j;
+        for (i = j = 0; i < trail.size(); i++)
+            if (seen[var(trail[i])] == 0)
+                trail[j++] = trail[i];
+        trail.shrink(i - j);
+        //printf("trail.size()= %d, qhead = %d\n", trail.size(), qhead);
+        qhead = trail.size();
+
+        for (int i = 0; i < released_vars.size(); i++)
+            seen[released_vars[i]] = 0;
+
+        // Released variables are now ready to be reused:
+        append(released_vars, free_vars);
+        released_vars.clear();
+    }
     checkGarbage();
     rebuildOrderHeap();
 
diff -Naur minisat-2.2.0_or/core/Solver_C.cc minisat-2.2.0/core/Solver_C.cc
--- minisat-2.2.0_or/core/Solver_C.cc	1970-01-01 01:00:00.000000000 +0100
+++ minisat-2.2.0/core/Solver_C.cc	2013-09-10 10:17:37.351726062 +0200
@@ -0,0 +1,196 @@
+/**************************************************************************************************
+
+Solver_C.C
+
+C-wrapper for Solver.C
+
+  This file is part of NuSMV version 2. 
+  Copyright (C) 2007 by FBK-irst. 
+  Author: Roberto Cavada <cavada@fbk.eu>
+
+  NuSMV version 2 is free software; you can redistribute it and/or 
+  modify it under the terms of the GNU Lesser General Public 
+  License as published by the Free Software Foundation; either 
+  version 2 of the License, or (at your option) any later version.
+
+  NuSMV version 2 is distributed in the hope that it will be useful, 
+  but WITHOUT ANY WARRANTY; without even the implied warranty of 
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
+  Lesser General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public 
+  License along with this library; if not, write to the Free Software 
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
+
+  For more information on NuSMV see <http://nusmv.fbk.eu>
+  or email to <nusmv-users@fbk.eu>.
+  Please report bugs to <nusmv-users@fbk.eu>.
+
+  To contact the NuSMV development board, email to <nusmv@fbk.eu>. ]
+
+**************************************************************************************************/
+
+
+#include "Solver.h"
+extern "C" {
+#include "Solver_C.h"
+}
+
+extern "C" MiniSat_ptr MiniSat_Create()
+{
+  return (MiniSat_ptr)new Minisat::Solver();
+}
+
+extern "C"void MiniSat_Delete(MiniSat_ptr ms)
+{
+  delete (Minisat::Solver *)ms;
+}
+
+extern "C" int MiniSat_Nof_Variables(MiniSat_ptr ms)
+{
+  return ((Minisat::Solver *)ms)->nVars();
+}
+
+extern "C" int MiniSat_Nof_Clauses(MiniSat_ptr ms)
+{
+  return ((Minisat::Solver *)ms)->nClauses();
+}
+
+/* variables are in the range 1...N */
+extern "C" int MiniSat_New_Variable(MiniSat_ptr ms)
+{
+  /* Actually, minisat used variable range 0 .. N-1,
+     so in all function below there is a convertion between
+     input variable (1..N) and internal variables (0..N-1)
+  */	
+  return ((Minisat::Solver *)ms)->newVar(false /*polarity*/) + 1;
+}
+
+
+/*
+ * Here clauses are in dimacs form, variable indexing is 1...N
+ */
+extern "C" int MiniSat_Add_Clause(MiniSat_ptr ms,
+				  int *clause_lits, int num_lits)
+{
+  int i;
+  Minisat::vec<Minisat::Lit> cl;
+  for(i = 0; i < num_lits; i++) {
+    const int lit = clause_lits[i];
+    assert(abs(lit) > 0);
+    assert(abs(lit) <= MiniSat_Nof_Variables((Minisat::Solver*)ms));
+    int var = abs(lit) - 1;
+    cl.push((lit > 0) ? Minisat::mkLit(var) : ~ Minisat::mkLit(var));
+  }
+  ((Minisat::Solver *)ms)->addClause(cl);
+  if(((Minisat::Solver *)ms)->okay()) return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_Solve(MiniSat_ptr ms)
+{
+  bool ret = ((Minisat::Solver *)ms)->solve();
+  if(ret) return 1;
+  return 0;
+}
+
+/*
+ * Here the assumption is in "dimacs form", variable indexing is 1...N
+ */
+extern "C" int MiniSat_Solve_Assume(MiniSat_ptr ms,
+				    int nof_assumed_lits,
+				    int *assumed_lits)
+{
+  int i;
+  Minisat::vec<Minisat::Lit> cl;
+  assert(((Minisat::Solver*)0) != ((Minisat::Solver*)ms)); 
+  Minisat::Solver& solver = *((Minisat::Solver*)ms);
+
+  solver.simplify();
+  if(solver.okay() == false) return 0;
+
+  assert(nof_assumed_lits >= 0);
+  for(i = 0; i < nof_assumed_lits; i++) {
+    const int lit = assumed_lits[i];
+    assert(abs(lit) > 0);
+    assert(abs(lit) <= MiniSat_Nof_Variables((Minisat::Solver*)ms));
+    int var = abs(lit) - 1;
+    cl.push((lit > 0) ? Minisat::mkLit(var) : ~Minisat::mkLit(var));
+  }
+
+  if (solver.solve(cl)) return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_simplifyDB(MiniSat_ptr ms)
+{
+  ((Minisat::Solver *)ms)->simplify();
+  if(((Minisat::Solver *)ms)->okay()) return 1;
+  return 0;
+}
+
+/*
+ * Here variables are numbered 1...N
+ */
+extern "C" int MiniSat_Get_Value(MiniSat_ptr ms, int var_num)
+{
+  assert(var_num > 0);
+  if(var_num > MiniSat_Nof_Variables(ms)) return -1;
+  /* minisat assigns all variables. just check */
+  assert(((Minisat::Solver *)ms)->model[var_num-1] != l_Undef); 
+  
+  if(((Minisat::Solver *)ms)->model[var_num-1] == l_True) return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_Get_Nof_Conflict_Lits(MiniSat_ptr ms)
+{
+  assert(((Minisat::Solver*)0) != ((Minisat::Solver*)ms)); 
+  Minisat::Solver& solver = *((Minisat::Solver*)ms);
+
+  return solver.conflict.size();
+}
+
+extern "C" void MiniSat_Get_Conflict_Lits(MiniSat_ptr ms, int* conflict_lits)
+{
+  assert(((Minisat::Solver*)0) != ((Minisat::Solver*)ms)); 
+  Minisat::Solver& solver = *((Minisat::Solver*)ms);
+
+  Minisat::vec<Minisat::Lit>& cf = solver.conflict;
+
+  for (int i = 0; i < cf.size(); i++) {
+    int v = Minisat::var(~cf[i]);
+    int s = Minisat::sign(~cf[i]);
+    assert(v != var_Undef);
+    conflict_lits[i] = (s == 0) ? (v+1) : -(v+1);
+  }
+}
+
+/** mode can be  polarity_user, polarity_rnd */
+extern "C" void MiniSat_Set_Polarity_Mode(MiniSat_ptr ms, int mode)
+{
+  assert(((Minisat::Solver*)0) != ((Minisat::Solver*)ms)); 
+  assert(__polarity_unsupported != mode); 
+  Minisat::Solver& solver = *((Minisat::Solver*)ms);  
+  if (polarity_rnd == mode) {
+    solver.rnd_pol = true;
+  }
+  else {
+    assert(polarity_user == mode); 
+    solver.rnd_pol = false;    
+  }
+}
+
+extern "C" int MiniSat_Get_Polarity_Mode(MiniSat_ptr ms)
+{
+  assert(((Minisat::Solver*)0) != ((Minisat::Solver*)ms)); 
+  Minisat::Solver& solver = *((Minisat::Solver*)ms);  
+  return solver.rnd_pol ? polarity_rnd : polarity_user;
+}
+
+extern "C" void MiniSat_Set_Random_Seed(MiniSat_ptr ms, double seed)
+{
+  assert(((Minisat::Solver*)0) != ((Minisat::Solver*)ms)); 
+  Minisat::Solver& solver = *((Minisat::Solver*)ms);
+  solver.random_seed = seed;
+}
diff -Naur minisat-2.2.0_or/core/Solver_C.h minisat-2.2.0/core/Solver_C.h
--- minisat-2.2.0_or/core/Solver_C.h	1970-01-01 01:00:00.000000000 +0100
+++ minisat-2.2.0/core/Solver_C.h	2013-09-10 10:17:37.351726062 +0200
@@ -0,0 +1,67 @@
+/**************************************************************************************************
+
+Solver_C.h
+
+C-wrapper for Solver.h
+
+  This file is part of NuSMV version 2. 
+  Copyright (C) 2007 by FBK-irst. 
+  Author: Roberto Cavada <cavada@fbk.eu>
+
+  NuSMV version 2 is free software; you can redistribute it and/or 
+  modify it under the terms of the GNU Lesser General Public 
+  License as published by the Free Software Foundation; either 
+  version 2 of the License, or (at your option) any later version.
+
+  NuSMV version 2 is distributed in the hope that it will be useful, 
+  but WITHOUT ANY WARRANTY; without even the implied warranty of 
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
+  Lesser General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public 
+  License along with this library; if not, write to the Free Software 
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
+
+  For more information on NuSMV see <http://nusmv.fbk.eu>
+  or email to <nusmv-users@fbk.eu>.
+  Please report bugs to <nusmv-users@fbk.eu>.
+
+  To contact the NuSMV development board, email to <nusmv@fbk.eu>. ]
+
+**************************************************************************************************/
+
+#ifndef SOLVER_C_h
+#define SOLVER_C_h
+
+//=================================================================================================
+// Solver -- the main class:
+
+#define MiniSat_ptr void *
+
+enum {
+  __polarity_unsupported = -1,
+  polarity_true = __polarity_unsupported, 
+  polarity_false = __polarity_unsupported, 
+  polarity_user = 2,  
+  polarity_rnd = 3,
+};
+
+MiniSat_ptr MiniSat_Create();
+void MiniSat_Delete(MiniSat_ptr);
+int MiniSat_Nof_Variables(MiniSat_ptr);
+int MiniSat_Nof_Clauses(MiniSat_ptr);
+int MiniSat_New_Variable(MiniSat_ptr);
+int MiniSat_Add_Clause(MiniSat_ptr, int *clause_lits, int num_lits);
+int MiniSat_Solve(MiniSat_ptr);
+int MiniSat_Solve_Assume(MiniSat_ptr, int nof_assumed_lits, int *assumed_lits);
+int MiniSat_simplifyDB(MiniSat_ptr);
+int MiniSat_Get_Value(MiniSat_ptr, int var_num);
+int MiniSat_Get_Nof_Conflict_Lits(MiniSat_ptr ms);
+void MiniSat_Get_Conflict_Lits(MiniSat_ptr ms, int* conflict_lits);
+
+void MiniSat_Set_Polarity_Mode(MiniSat_ptr ms, int mode);
+int MiniSat_Get_Polarity_Mode(MiniSat_ptr ms);
+void MiniSat_Set_Random_Seed(MiniSat_ptr ms, double seed);
+
+//=================================================================================================
+#endif
diff -Naur minisat-2.2.0_or/core/Solver.h minisat-2.2.0/core/Solver.h
--- minisat-2.2.0_or/core/Solver.h	2010-07-10 18:07:36.000000000 +0200
+++ minisat-2.2.0/core/Solver.h	2013-09-10 10:17:37.351726062 +0200
@@ -44,6 +44,9 @@
     // Problem specification:
     //
     Var     newVar    (bool polarity = true, bool dvar = true); // Add a new variable with parameters specifying variable mode.
+    // NuSMV: release var
+    void    releaseVar(Lit l);                                  // Make literal true and promise to never refer to variable again.
+    // NuSMV: release var END
 
     bool    addClause (const vec<Lit>& ps);                     // Add a clause to the solver. 
     bool    addEmptyClause();                                   // Add the empty clause, making the solver contradictory.
@@ -79,6 +82,19 @@
     void    setPolarity    (Var v, bool b); // Declare which polarity the decision heuristic should use for a variable. Requires mode 'polarity_user'.
     void    setDecisionVar (Var v, bool b); // Declare if a variable should be eligible for selection in the decision heuristic.
 
+    // NuSMV: PREF MOD
+    /*
+     * Add a variable at the end of the list of preferred variables
+     * Does not remove the variable from the standard ordering.
+     */
+    void addPreferred(Var v);
+    
+    /*
+     * Clear vector of preferred variables.
+     */
+    void clearPreferred();
+    // NuSMV: PREF MOD END
+
     // Read state:
     //
     lbool   value      (Var x) const;       // The current value of a variable.
@@ -192,6 +208,16 @@
 
     ClauseAllocator     ca;
 
+    // NuSMV: PREF MOD
+    vec<Var>            preferred;
+    // NuSMV: PREF MOD END
+
+    // NuSMV: release var
+    Var                 next_var;         // Next variable to be created.
+    vec<Var>            released_vars;
+    vec<Var>            free_vars;
+    // NuSMV: release var END
+
     // Temporaries (to reduce allocation overhead). Each variable is prefixed by the method in which it is
     // used, exept 'seen' wich is used in several places.
     //
@@ -325,7 +351,7 @@
 inline int      Solver::nAssigns      ()      const   { return trail.size(); }
 inline int      Solver::nClauses      ()      const   { return clauses.size(); }
 inline int      Solver::nLearnts      ()      const   { return learnts.size(); }
-inline int      Solver::nVars         ()      const   { return vardata.size(); }
+inline int      Solver::nVars         ()      const   { return next_var; }
 inline int      Solver::nFreeVars     ()      const   { return (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]); }
 inline void     Solver::setPolarity   (Var v, bool b) { polarity[v] = b; }
 inline void     Solver::setDecisionVar(Var v, bool b) 
diff -Naur minisat-2.2.0_or/core/SolverTypes.h minisat-2.2.0/core/SolverTypes.h
--- minisat-2.2.0_or/core/SolverTypes.h	2010-07-10 18:07:36.000000000 +0200
+++ minisat-2.2.0/core/SolverTypes.h	2013-09-10 10:17:37.351726062 +0200
@@ -81,9 +81,9 @@
 //       does enough constant propagation to produce sensible code, and this appears to be somewhat
 //       fragile unfortunately.
 
-#define l_True  (lbool((uint8_t)0)) // gcc does not do constant propagation if these are real constants.
-#define l_False (lbool((uint8_t)1))
-#define l_Undef (lbool((uint8_t)2))
+#define l_True  (Minisat::lbool((uint8_t)0)) // gcc does not do constant propagation if these are real constants.
+#define l_False (Minisat::lbool((uint8_t)1))
+#define l_Undef (Minisat::lbool((uint8_t)2))
 
 class lbool {
     uint8_t value;
diff -Naur minisat-2.2.0_or/Makefile minisat-2.2.0/Makefile
--- minisat-2.2.0_or/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ minisat-2.2.0/Makefile	2013-09-10 10:17:37.351726062 +0200
@@ -0,0 +1,35 @@
+# Copyright (c) 2007 by FBK-irst
+# Author: Roberto Cavada <cavada@fbk.eu>
+# This file has been added in order to make Minisat2 
+# compilable with NuSMV
+
+LIBNAME = libminisat.a
+EXT_LIBNAME = libMiniSat.a
+EXT_LIBIFC = Solver_C.h
+COREDIR = simp
+
+LN ?= ln -s
+RANLIB ?= ranlib
+RM ?= rm -f
+MAKE ?= make
+
+# ----------------------------------------------------------------------
+# this target is invoked by the builder
+lib: $(EXT_LIBNAME) $(EXT_LIBIFC)
+	@echo Done
+
+clean: 
+	cd $(COREDIR) && $(MAKE) clean MROOT=..
+	$(RM) $(EXT_LIBNAME) $(EXT_LIBIFC)
+	$(RM) $(COREDIR)/depend.mk
+# ----------------------------------------------------------------------
+
+$(COREDIR)/$(LIBNAME):
+	cd $(COREDIR) && $(MAKE) libs LIB=minisat MROOT=.. \
+		&& $(RANLIB) $(LIBNAME)
+
+$(EXT_LIBNAME): $(COREDIR)/$(LIBNAME)
+	$(LN) $(COREDIR)/$(LIBNAME) $(EXT_LIBNAME)
+
+$(EXT_LIBIFC):
+	$(LN) $(COREDIR)/$(EXT_LIBIFC) $(EXT_LIBIFC)
diff -Naur minisat-2.2.0_or/simp/Solver_C.cc minisat-2.2.0/simp/Solver_C.cc
--- minisat-2.2.0_or/simp/Solver_C.cc	1970-01-01 01:00:00.000000000 +0100
+++ minisat-2.2.0/simp/Solver_C.cc	2013-09-10 10:17:37.351726062 +0200
@@ -0,0 +1,219 @@
+
+/**************************************************************************************************
+
+Solver_C.C
+
+C-wrapper for Solver.C
+
+  This file is part of NuSMV version 2. 
+  Copyright (C) 2007 by FBK-irst. 
+  Author: Roberto Cavada <cavada@fbk.eu>
+
+  NuSMV version 2 is free software; you can redistribute it and/or 
+  modify it under the terms of the GNU Lesser General Public 
+  License as published by the Free Software Foundation; either 
+  version 2 of the License, or (at your option) any later version.
+
+  NuSMV version 2 is distributed in the hope that it will be useful, 
+  but WITHOUT ANY WARRANTY; without even the implied warranty of 
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
+  Lesser General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public 
+  License along with this library; if not, write to the Free Software 
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
+
+  For more information on NuSMV see <http://nusmv.fbk.eu>
+  or email to <nusmv-users@fbk.eu>.
+  Please report bugs to <nusmv-users@fbk.eu>.
+
+  To contact the NuSMV development board, email to <nusmv@fbk.eu>. ]
+
+**************************************************************************************************/
+
+
+#include "SimpSolver.h"
+extern "C" {
+#include "Solver_C.h"
+}
+
+extern "C" MiniSat_ptr MiniSat_Create()
+{
+  return (MiniSat_ptr) new Minisat::SimpSolver();
+}
+
+extern "C"void MiniSat_Delete(MiniSat_ptr ms)
+{
+  delete (Minisat::SimpSolver *)ms;
+}
+
+extern "C" int MiniSat_Nof_Variables(MiniSat_ptr ms)
+{
+  return ((Minisat::SimpSolver *)ms)->nVars();
+}
+
+extern "C" int MiniSat_Nof_Clauses(MiniSat_ptr ms)
+{
+  return ((Minisat::SimpSolver *)ms)->nClauses();
+}
+
+/* variables are in the range 1...N */
+extern "C" int MiniSat_New_Variable(MiniSat_ptr ms)
+{
+  /* Actually, minisat used variable range 0 .. N-1,
+     so in all function below there is a convertion between
+     input variable (1..N) and internal variables (0..N-1)
+  */	
+  Minisat::Var var = ((Minisat::SimpSolver *)ms)->newVar(false /*polarity*/);
+  ((Minisat::SimpSolver *)ms)->setFrozen(var, true);
+  return var+1;
+}
+
+
+/*
+ * Here clauses are in dimacs form, variable indexing is 1...N
+ */
+extern "C" int MiniSat_Add_Clause(MiniSat_ptr ms,
+                                  int *clause_lits, int num_lits)
+{
+  int i;
+  Minisat::vec<Minisat::Lit> cl;
+  for(i = 0; i < num_lits; ++i) {
+    const int lit = clause_lits[i];
+    assert(abs(lit) > 0);
+    assert(abs(lit) <= MiniSat_Nof_Variables((Minisat::SimpSolver*)ms));
+    int var = abs(lit) - 1;
+    cl.push((lit > 0) ? Minisat::mkLit(var) : ~ Minisat::mkLit(var));
+  }
+  ((Minisat::SimpSolver *)ms)->addClause(cl);
+
+  if(((Minisat::SimpSolver *)ms)->okay()) return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_Solve(MiniSat_ptr ms)
+{
+  bool ret = ((Minisat::SimpSolver *)ms)->solve();
+  if(ret) return 1;
+  return 0;
+}
+
+/*
+ * Here the assumption is in "dimacs form", variable indexing is 1...N
+ */
+extern "C" int MiniSat_Solve_Assume(MiniSat_ptr ms,
+				    int nof_assumed_lits,
+				    int *assumed_lits)
+{
+  int i;
+  Minisat::vec<Minisat::Lit> cl;
+  assert(((Minisat::SimpSolver*)0) != ((Minisat::SimpSolver*)ms)); 
+  Minisat::SimpSolver& solver = *((Minisat::SimpSolver*)ms);
+
+  solver.simplify();
+  if(solver.okay() == false) return 0;
+
+  assert(nof_assumed_lits >= 0);
+  for(i = 0; i < nof_assumed_lits; ++i) {
+    const int lit = assumed_lits[i];
+    assert(abs(lit) > 0);
+    assert(abs(lit) <= MiniSat_Nof_Variables((Minisat::SimpSolver*)ms));
+    int var = abs(lit) - 1;
+    cl.push((lit > 0) ? Minisat::mkLit(var) : ~Minisat::mkLit(var));
+  }
+
+  if (solver.solve(cl)) return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_simplifyDB(MiniSat_ptr ms)
+{
+  ((Minisat::SimpSolver *)ms)->simplify();
+  if(((Minisat::SimpSolver *)ms)->okay()) return 1;
+  return 0;
+}
+
+/*
+ * Here variables are numbered 1...N
+ */
+extern "C" int MiniSat_Get_Value(MiniSat_ptr ms, int var_num)
+{
+  assert(var_num > 0);
+  if(var_num > MiniSat_Nof_Variables(ms)) return -1;
+  /* minisat assigns all variables. just check */
+  assert(((Minisat::SimpSolver *)ms)->model[var_num-1] != l_Undef); 
+  
+  if(((Minisat::SimpSolver *)ms)->model[var_num-1] == l_True) return 1;
+  return 0;
+}
+
+extern "C" int MiniSat_Get_Nof_Conflict_Lits(MiniSat_ptr ms)
+{
+  assert(((Minisat::SimpSolver*)0) != ((Minisat::SimpSolver*)ms)); 
+  Minisat::SimpSolver& solver = *((Minisat::SimpSolver*)ms);
+
+  return solver.conflict.size();
+}
+
+extern "C" void MiniSat_Get_Conflict_Lits(MiniSat_ptr ms, int* conflict_lits)
+{
+  assert(((Minisat::SimpSolver*)0) != ((Minisat::SimpSolver*)ms)); 
+  Minisat::SimpSolver& solver = *((Minisat::SimpSolver*)ms);
+
+  Minisat::vec<Minisat::Lit>& cf = solver.conflict;
+
+  for (int i = 0; i < cf.size(); ++i) {
+    int v = Minisat::var(~cf[i]);
+    int s = Minisat::sign(~cf[i]);
+    assert(v != var_Undef);
+    conflict_lits[i] = (s == 0) ? (v+1) : -(v+1);
+  }
+}
+
+/** mode can be  polarity_user, polarity_rnd */
+extern "C" void MiniSat_Set_Polarity_Mode(MiniSat_ptr ms, int mode)
+{
+  assert(((Minisat::SimpSolver*)0) != ((Minisat::SimpSolver*)ms)); 
+  assert(__polarity_unsupported != mode); 
+  Minisat::SimpSolver& solver = *((Minisat::SimpSolver*)ms);  
+  if (polarity_rnd == mode) {
+    solver.rnd_pol = true;
+  }
+  else {
+    assert(polarity_user == mode); 
+    solver.rnd_pol = false;    
+  }
+}
+
+extern "C" int MiniSat_Get_Polarity_Mode(MiniSat_ptr ms)
+{
+  assert(((Minisat::SimpSolver*)0) != ((Minisat::SimpSolver*)ms)); 
+  Minisat::SimpSolver& solver = *((Minisat::SimpSolver*)ms);  
+  return solver.rnd_pol ? polarity_rnd : polarity_user;
+}
+
+extern "C" void MiniSat_Set_Random_Seed(MiniSat_ptr ms, double seed)
+{
+  assert(((Minisat::SimpSolver*)0) != ((Minisat::SimpSolver*)ms)); 
+  Minisat::SimpSolver& solver = *((Minisat::SimpSolver*)ms);
+  solver.random_seed = seed;
+}
+
+
+// NuSMV: PREF MOD
+/* variables are in the range 1...N */
+extern "C" void MiniSat_Set_Preferred_Variable(MiniSat_ptr ms, int x)
+{
+  /* Actually, minisat used variable range 0 .. N-1,
+     so in all function below there is a convertion between
+     input variable (1..N) and internal variables (0..N-1)
+  */
+  ((Minisat::SimpSolver *)ms)->addPreferred((Minisat::Var) x);
+}
+
+extern "C" void MiniSat_Clear_Preferred_Variables(MiniSat_ptr ms)
+{
+
+  ((Minisat::SimpSolver *)ms)->clearPreferred();
+}
+// NuSMV: PREF MOD END
diff -Naur minisat-2.2.0_or/simp/Solver_C.h minisat-2.2.0/simp/Solver_C.h
--- minisat-2.2.0_or/simp/Solver_C.h	1970-01-01 01:00:00.000000000 +0100
+++ minisat-2.2.0/simp/Solver_C.h	2013-09-10 10:17:37.351726062 +0200
@@ -0,0 +1,72 @@
+/**************************************************************************************************
+
+Solver_C.h
+
+C-wrapper for Solver.h
+
+  This file is part of NuSMV version 2. 
+  Copyright (C) 2007 by FBK-irst. 
+  Author: Roberto Cavada <cavada@fbk.eu>
+
+  NuSMV version 2 is free software; you can redistribute it and/or 
+  modify it under the terms of the GNU Lesser General Public 
+  License as published by the Free Software Foundation; either 
+  version 2 of the License, or (at your option) any later version.
+
+  NuSMV version 2 is distributed in the hope that it will be useful, 
+  but WITHOUT ANY WARRANTY; without even the implied warranty of 
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
+  Lesser General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public 
+  License along with this library; if not, write to the Free Software 
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
+
+  For more information on NuSMV see <http://nusmv.fbk.eu>
+  or email to <nusmv-users@fbk.eu>.
+  Please report bugs to <nusmv-users@fbk.eu>.
+
+  To contact the NuSMV development board, email to <nusmv@fbk.eu>. ]
+
+**************************************************************************************************/
+
+#ifndef SOLVER_C_h
+#define SOLVER_C_h
+
+//=================================================================================================
+// Solver -- the main class:
+
+#define MiniSat_ptr void *
+
+enum {
+  __polarity_unsupported = -1,
+  polarity_true = __polarity_unsupported, 
+  polarity_false = __polarity_unsupported, 
+  polarity_user = 2,  
+  polarity_rnd = 3,
+};
+
+MiniSat_ptr MiniSat_Create();
+void MiniSat_Delete(MiniSat_ptr);
+int MiniSat_Nof_Variables(MiniSat_ptr);
+int MiniSat_Nof_Clauses(MiniSat_ptr);
+int MiniSat_New_Variable(MiniSat_ptr);
+int MiniSat_Add_Clause(MiniSat_ptr, int *clause_lits, int num_lits);
+int MiniSat_Solve(MiniSat_ptr);
+int MiniSat_Solve_Assume(MiniSat_ptr, int nof_assumed_lits, int *assumed_lits);
+int MiniSat_simplifyDB(MiniSat_ptr);
+int MiniSat_Get_Value(MiniSat_ptr, int var_num);
+int MiniSat_Get_Nof_Conflict_Lits(MiniSat_ptr ms);
+void MiniSat_Get_Conflict_Lits(MiniSat_ptr ms, int* conflict_lits);
+
+void MiniSat_Set_Polarity_Mode(MiniSat_ptr ms, int mode);
+int MiniSat_Get_Polarity_Mode(MiniSat_ptr ms);
+void MiniSat_Set_Random_Seed(MiniSat_ptr ms, double seed);
+
+// NuSMV: PREF MOD
+void MiniSat_Set_Preferred_Variable(MiniSat_ptr, int);
+void MiniSat_Clear_Preferred_Variables(MiniSat_ptr);
+// NuSMV: PREF MOD END
+
+//=================================================================================================
+#endif
